library(readxl)
library(tidyverse)
library(reshape2)
dataloc <- "C:/Users/Lenovo/github/global/data/UN_MigrantStockByOriginAndDestination_2017.xlsx"
clist <- "C:/Users/Lenovo/github/global/data/countriesun.xlsx"
countries <- read_excel(clist, sheet="UN")
data2017 <- read_xlsx(dataloc, sheet = "Table 1", skip = 15, na = "..",
col_names = TRUE,
col_types = c("numeric", "skip", "text", "skip",
"numeric",
rep("skip", 4),
rep("numeric", 232))) #gives a warning
data2017 <- data2017 %>%
filter(X__3 < 900)
## match with country codes
getCountryCode <- function(xcountry="Nepal") {
#usage getCountryCode("Australia") will return "AU"
code <- countries[countries$newname == xcountry,c("ISOCODE")]
if (is.na(code[1])) {
return(NA)
} else {
return(as.character(code[1]))
}
}
getCountryCode <- function(xcountry="Nepal") {
#usage getCountryCode("Australia") will return "AU"
code <- countries[countries$newname == xcountry,c("ISOCODE")]
if (is.na(code[1])) {
return(NA)
} else {
return(as.character(code[1]))
}
}
## match with country codes
getCountryName <- function(xcountry="NP") {
#usage getCountryName("AU") will return "Australia"
code <- countries[countries$ISOCODE == xcountry, c("COUNTRY_UN")]
if (is.na(code[1])) {
return(NA)
} else {
return(as.character(code[1]))
}
}
head(m2015.sub)
head(data2015.sub)
data2015 <- data2017
#process country names
countries$newname <- chartr("'", " ", countries$COUNTRY_UN)
countries$newname <- chartr("(", " ", countries$newname)
countries$newname <- chartr(")", " ", countries$newname)
countries$newname <- chartr("-", " ", countries$newname)
countries$newname <- chartr(".", " ", countries$newname)
countries$newname <- gsub("\\s","", chartr(",", " ", countries$newname))
#convert col names to country ISCOCODEs
oldnames <- names(data2015)
oldnames <- chartr("'", " ", oldnames)
oldnames <- chartr("(", " ", oldnames)
oldnames <- chartr(")", " ", oldnames)
oldnames <- chartr("-", " ", oldnames)
oldnames <- chartr(",", " ", oldnames)
newnames <- chartr(".", " ", oldnames) #replace . with space
newnames <- gsub("\\s","", newnames) #final names to match
countries$ISOCODE <- as.character(countries$ISOCODE)
newnames2 <- sapply(newnames[4:length(newnames)], getCountryCode)
# newnames2[is.na(newnames2)] <- oldnames[is.na(newnames2)]
names(data2015) <- c("datayear", "name" , "ccode", newnames2)
data2015$newname <- chartr("'", " ", data2015$name)
data2015$newname <- chartr("(", " ", data2015$newname)
data2015$newname <- chartr(")", " ", data2015$newname)
data2015$newname <- chartr("-", " ", data2015$newname)
data2015$newname <- chartr(".", " ", data2015$newname)
data2015$newname <- gsub("\\s","", chartr(",", " ", data2015$newname))
data2015$ISOCODE <- sapply(data2015$newname, getCountryCode)
#melt data
data2015.sub <- data2015[ , c(-2,-3)]
m2015 <- melt(data2015.sub, c("newname", "ISOCODE", "datayear"),
names(data2015)[4:235],
value.name = "STOCK")
head(data2015)
head(data2015.sub)
head(m2015)
m2015 <- melt(data2015.sub, c("newname", "ISOCODE", "datayear"),
names(data2015)[4:235],
value.name = "STOCK")
names(m2015) <- c("newname", "destination", "year", "source", "stock")
m2015 <- m2015[complete.cases(m2015),]
m2015 <- m2015[m2015$year == 2017,]
head(m2015)
m2015 %>% filter(destination == "NP")
# nodes.au <- airports.au[,c("V5", "V2")]
nodes.mig <- countries[ , c(2:4)]
names(nodes.mig) <- c("id", "lat", "lon")
#make links
# links.au <- routes.au[, c("V3", "V5", "flights")]
links.mig <- m2015[, c("source", "destination", "stock")]
names(links.mig) <- c("source", "target", "weight")
library(igraph)
net.au <- graph_from_data_frame(d = links.mig,
vertices = nodes.mig,
directed = TRUE)
# class(net)
plot(net.au, edge.arrow.size=.2)
